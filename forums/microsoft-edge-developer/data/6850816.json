{"id":"6850816","link":"https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6850816-es6-tail-call-optimization","title":"ES6 Tail Call Optimization","body":"Besides providing better tools for JS devs, this will greatly enhance JavaScript's support for functional languages compiled to JS, like ClojureScript.","votes":"632","user":"https://wpdev.uservoice.com/users/61781039-roy-tinker","datetime":"2014-12-16","comments":[{"user":"https://wpdev.uservoice.com/users/881461510","datetime":"2019-01-25","body":"That is a must for any serious interpreter/compiler"},{"user":"https://wpdev.uservoice.com/users/100075560-marc-nieper-wi%C3%9Fkirchen","datetime":"2015-10-13","body":"ES6 Tail Call Optimization has landed in WebKit:"},{"user":"https://wpdev.uservoice.com/users/100075560-marc-nieper-wi%C3%9Fkirchen","datetime":"2015-09-14","body":"Could you elucidate this quote: \"We are still evaluating this technology. There may be significant spec stabilization, foundational work, or additional community input required before we can begin development.\"?"},{"user":"https://wpdev.uservoice.com/users/100075560-marc-nieper-wi%C3%9Fkirchen","datetime":"2015-09-02","body":"In order to be able to effectively compile languages with proper tail calls (e.g. Scheme) to Ecmascript, this is a must-have-feature. Furthermore, for an Ecmascript programmer, this allows for a continuation-passing program style without having to worry about stack overflows."},{"user":"https://wpdev.uservoice.com/users/75206370-john","datetime":"2015-05-06","body":"I'd love TCO and have voted for it - it would be wise to see why others have not included it in their languages. There are threads out there about this for Python and Ruby and reasons why it was not included in the end."},{"user":"https://wpdev.uservoice.com/users/75156021-brian-mitchell","datetime":"2015-05-06","body":"There are many parts of ES-harmony which can be trivially polyfilled but tail call elimination is not one of them. Some compilers such as babel attempt to emulate some optimizations for trivial cases but it turns into a guessing game of when something may or may not be effectively eliminated making the feature hard to leverage at any significant scale. This would not only be an advantage for functional languages compiled to ES6+ but for functional languages that want rich interoperation with JavaScript. The potential for influencing the way future JS code is written is huge if this is considered."},{"user":"https://wpdev.uservoice.com/users/61781039-roy-tinker","datetime":"2014-12-16","body":"Resources:\n<br>- <a rel=\"nofollow noreferrer\" href=\"http://wiki.ecmascript.org/doku.php?id=harmony:proper_tail_calls\">http://wiki.ecmascript.org/doku.php?id=harmony:proper_tail_calls</a>\n<br>- <a rel=\"nofollow noreferrer\" href=\"http://duartes.org/gustavo/blog/post/tail-calls-optimization-es6/\">http://duartes.org/gustavo/blog/post/tail-calls-optimization-es6/</a>"}]}