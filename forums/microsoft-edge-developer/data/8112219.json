{"id":"8112219","link":"https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/8112219-show-lexical-scopes-like-element-form-document-for","title":"Show Lexical Scopes like Element/Form/Document for Inline Event Handler Callbacks","body":"While writing an article to describe how browser's create a pseudo closure for inline event handlers, I found that Chrome had the ability to visualize these objects while F12 did not. If you review the article you'll find that by setting up an inline event handler on an element, some additional objects are injected into the scope chain of the function and under what circumstances. I would expect the F12 toolbar to be able to visualize these objects just like Chrome.","votes":"29","user":"https://wpdev.uservoice.com/users/62279949-justin-rogers","datetime":"2015-05-25","comments":[{"user":"https://wpdev.uservoice.com/users/62279949-justin-rogers","datetime":"2015-05-25","body":"Some additional supporting evidence which shows that even moving from one form to another, keeps the bound scope chain set on the original form. This is so amazingly confusing that without tools you can't possibly figure out why things are happening the way they are."},{"user":"https://wpdev.uservoice.com/users/62279949-justin-rogers","datetime":"2015-05-25","body":"Some supporting evidence. These hidden variables can lead to leaks. This shows how a button with a lexical scope wrapped around its form is maintains connection even after the button is removed from the form and the form is removed from the tree."}]}