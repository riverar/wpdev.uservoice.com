{"id":"10911696","link":"https://wpdev.uservoice.com/forums/110705-universal-windows-platform/suggestions/10911696-universal-apps-drag-drop-remove-read-only-attr","title":"Universal Apps drag & drop - remove read-only attribute","body":"Please add a \"Windows 10 Apps\" category to this UserVoice.","votes":"57","user":"https://wpdev.uservoice.com/users/251669689-luis-cantero","datetime":"2015-11-30","comments":[{"user":"https://wpdev.uservoice.com/users/251695348-ben-stevens","datetime":"2019-06-06","body":"Yes, this is essential. By the way, forcing read only makes no sense from a permissions point of view because if you set DragEventArgs.AcceptedOperation = DataPackageOperation.Move and then call dataPackageView.ReportOperationCompleted(DataPackageOperation.Move) after getting the files then the original file is deleted anyway!"},{"user":"https://wpdev.uservoice.com/users/898321390-jonathan","datetime":"2019-05-02","body":"Absolutely shocked that I don't have write access to a drag and dropped file. We really need this functionality."},{"user":"https://wpdev.uservoice.com/users/858302485-molech","datetime":"2018-10-14","body":"I also agree. Why is this not already implemented?"},{"user":"https://wpdev.uservoice.com/users/730909489-dani","datetime":"2017-12-28","body":"I am learning C# and UWP at the moment and I am making an app that requires read/write access to the files the user drops onto a ListView. I have to agree with the other comments here. Dragging and Dropping is a conscious action just like selecting files and folders from the File Picker is thereby we should have read and write access to the dropped files. "},{"user":"https://wpdev.uservoice.com/users/251669692-anonymous","datetime":"2017-09-21","body":"In addition, if the dropped item is a folder library, it's not only read-only, but you cannot get access to the actual folders"},{"user":"https://wpdev.uservoice.com/users/411895585-me","datetime":"2017-07-11","body":"An official response from Microsoft would be great."},{"user":"https://wpdev.uservoice.com/users/339939613-neme","datetime":"2017-03-04","body":"THIS! When I get a DataPackage with files in it and the RequestedOperation set to Move, I can't actually move them?! Try explaining that to the user..."},{"user":"https://wpdev.uservoice.com/users/149036856-martin","datetime":"2017-02-02","body":"We need this feature to provide a useful user experience to the user! We can't replace win32 tool if uwp does not provide the necessary abilities!"},{"user":"https://wpdev.uservoice.com/users/251669755-anonymous","datetime":"2016-09-08","body":"It's nice that you go security-first with UWP as it ultimately benefits all users. However I have to go with the crowd with this one. By dragging a file to an app the user consciously gives the app permission to manipulate the file OR developer must be able to ask permission to write the file after successful drag and drop."},{"user":"https://wpdev.uservoice.com/users/251669692-anonymous","datetime":"2016-04-04","body":"This pushes developers away from UWP apps, to Win32 apps, converted via Project Centennial for the Store. "},{"user":"https://wpdev.uservoice.com/users/251669713-steve-carless","datetime":"2016-03-17","body":"I see dropping the file as the user giving consent to the app to use it.  Read/Writes access should be allowed. "},{"user":"https://wpdev.uservoice.com/users/52834467-claudiuslollarius","datetime":"2016-01-05","body":"Agree with Lukas: dragging and dropping a file is a conscious user interaction, just as using a picker, and files opened that way should be granted the same permissions."},{"user":"https://wpdev.uservoice.com/users/54077101-lukas","datetime":"2015-11-30","body":"I fully agree. By dropping a file on a target app, the user has explicitly given the file to the app, very similar to picking the same file from a file picker. There is absolutely no reason for making the file read-only, just because it comes from drag+drop."}]}