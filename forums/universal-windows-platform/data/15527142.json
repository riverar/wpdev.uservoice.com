{"id":"15527142","link":"https://wpdev.uservoice.com/forums/110705-universal-windows-platform/suggestions/15527142-simplify-publish-to-appx-package-centennial","title":"Simplify Publish to Appx package (Centennial)","body":"Add Publish to Appx for Centennial button in VS. It should be &lt;2 minute wizard with no CMD involvement if you want developers to add their software to the store. As simple as ClickOnce publishing. I do not want to convert MSIs","votes":"20","user":"https://wpdev.uservoice.com/users/208050978-milos","datetime":"2016-08-03","comments":[{"user":"https://wpdev.uservoice.com/users/378201004-bogdan-mitrache","datetime":"2017-05-19","body":"Advanced Installer, a Microsoft solutions partner (as mentione here: <a rel=\"nofollow noreferrer\" href=\"https://docs.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-root#convert\">https://docs.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-root#convert</a>) provides now a GUI based extension for VS 2015 and VS 2017 which you can use to build AppX and MSI (for older platforms) packages and also you can enable your desktop app to be debugged inside of an UWP app container."},{"user":"https://wpdev.uservoice.com/users/208050978-milos","datetime":"2017-01-05","body":"Months after creating this \"idea\" I have found the VS extension: \"Desktop to UWP Packaging Project\" that simplifies this process. Once I added it to my project, set it up, for each version I just need to compile and run two commands which I have .bat files for. \n<br>It turned out simpler than I thought, but there is still place for simplification. For example a GUI way to choose files to be included in package and their final location, field to specify output appx file, field to select pfx. A wizzard for makecert.\n<br>It is not hard but there is a room for error."},{"user":"https://wpdev.uservoice.com/users/170319330-windows-project-centennial-team","datetime":"2017-01-04","body":"Thanks for your comments here. Yes, you are right, we are evaluating adding the Store Publishing Wizard to help the manifest edition and package creation, as we do for standard UWP projects. Please, let me know (@ridomin) if you are interested in providing feedback to the product group."},{"user":"https://wpdev.uservoice.com/users/302044153-perry","datetime":"2017-01-04","body":"Yes of course. ClickOnce too has a dialog where you enter a bunch of information but you do it once and then going forward you just press a button every release. There is no complex manifest file editing. The key thing here is that this should be done from Visual Studio not some command line utility which requires a win32 installer that I don't have or need. ClickOnce has no such installer so where am I going to get one."},{"user":"https://wpdev.uservoice.com/users/256236373","datetime":"2017-01-04","body":"How about a form where dev can fill out all important information in the manifest, since we login to visual studio could make it so can pick appID to use and auto-fill some properties. Overall the process could be streamlined into a GUI like people are asking for after going through it myself as it exists today."},{"user":"https://wpdev.uservoice.com/users/302044153-perry","datetime":"2016-12-30","body":"I totally agree. It should be as easy as it is today to publish my ClickOnce app. It takes a total of one click. Similarly there should be a \"Publish to Store\" button in my desktop VS project."}]}