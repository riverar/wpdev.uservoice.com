{"id":"36582889","link":"https://wpdev.uservoice.com/forums/110705-universal-windows-platform/suggestions/36582889-honor-the-extendedexecutionsession-flag-in-windows","title":"Honor the extendedExecutionSession flag in windows.gaming.input.gamepad.vibration","body":"UWP desktop app targeting Windows 17763, requesting and being granted an extendedExecutionSession can target the vibration motors through a windows.gaming.input.gamepad's Vibration interface but once the app gets minimized applying the Vibration property silently fails.\n<br>Please honor the extendedExecutionSession context, thanks.","votes":"4","user":"https://wpdev.uservoice.com/users/880820680-tim-demulder","datetime":"2019-01-21","comments":[{"user":"https://wpdev.uservoice.com/users/880820680-tim-demulder","datetime":"2019-05-19","body":"Hi Clint, is there any progress on request? I'd appreciate it, thanks!"},{"user":"https://wpdev.uservoice.com/users/880820680-tim-demulder","datetime":"2019-01-29","body":"Hi Clint, sorry for the delay in responding to you: turns out I'm not getting notified of any replies here. \n<br>The use case is as follows: our application gets minimized because another application gets the focus (browser/e-mail/IM/...) and the minimized application wants to get the user's attention to switch back to it by vibrating the controller's motors as a heads-up."},{"user":"https://wpdev.uservoice.com/users/68344437-clint-rutkas-msft","datetime":"2019-01-22","body":"If the application is minimized, can you explain the scenario where a gamepad's vibration would still be needed?  If minimized, another application could have context for the pad."}]}