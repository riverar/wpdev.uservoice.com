{"id":"3742409","link":"https://wpdev.uservoice.com/forums/110705-universal-windows-platform/suggestions/3742409-support-custom-direct-manipulation-implementations","title":"Support custom Direct Manipulation implementations in Windows Store Apps","body":"Currently the only way to take advantage of the direct manipulation in a XAML Windows store app is by using a ScrollViewer. However that isn't always appropriate. For example if one wanted to implemented a fixed columns Excel type functionality where the cells of the first column should not scroll horizontally but the cells should participate in the vertical smooth scrolling and where cells in the first row (and header) should scroll horizontally but not vertically. There really isn't a way to prevent some of those from scrolling since the ScrollViewer's Direct Manipulation implementation will animate/offset the rendering in the compositor thread well before the UI thread gets any notification (e.g. ViewChanged). There are other situations as well where a control may need custom handling of the direct manipulation (e.g. synchronizing scrolling of several disconnected elements).","votes":"45","user":"https://wpdev.uservoice.com/users/251670700-andrews","datetime":"2013-03-13","comments":[{"user":"https://wpdev.uservoice.com/users/215526531-micah","datetime":"2018-12-18","body":"Please take a look at this proposal for the Windows UI library and give it feedback"},{"user":"https://wpdev.uservoice.com/users/257278261-andrei-bucur","datetime":"2017-06-26","body":"Just a heads up this is still an issue after so many years. There's currently no way to implement custom input handling using DM. As a developer you are forced to use the Composition.Interactions API which runs in a different process and supports only async updates. This is basically a blocker for good user experiences when writing advanced canvas applications that don't necessarily need simple panning and scaling of visual assets."}]}