{"id":"5208045","link":"https://wpdev.uservoice.com/forums/110705-universal-windows-platform/suggestions/5208045-allow-developers-to-roll-back-to-a-previous-upda","title":"Allow Developers to 'roll back' to a previous update without re-certification","body":"Occasionally an update to an app gets past developer &amp; certification testing and is released into the wild. Even if the bug is an easy fix for the developer it will take the certification team the standard 4+ days to certify the new build and publish it.","votes":"251","user":"https://wpdev.uservoice.com/users/39531197","datetime":"2013-12-16","comments":[{"user":"https://wpdev.uservoice.com/users/407105284-matt","datetime":"2017-07-07","body":"This is a no brainer, especially for LoB apps. Come on Microsoft, you want developers to publish through your store but the turn around time for certification is unreasonable for a line of business app that can require same-hour critical updates. A roll back feature is more than necessary. And yes, it should downgrade all existing users, and not just block new updates. This was suggested 4 years ago, where does it stand on the backlog?"},{"user":"https://wpdev.uservoice.com/users/94518531-sree-prasantha-ram-mulpuri","datetime":"2015-08-12","body":"The developer must have the option to keep an inventory of stable app release against updated app versions \n<br>Configuration Example: \n<br>Update Version :: Stable Version \n<br>==1.2.0 :: 1.2.0 \n<br>&gt;=1.1.6 :: 1.1.5 \n<br>&lt;=1.1.4 :: 1.1.0 \n<br>&lt;=1.0.9 :: 1.0.5 \n<br>When the user decides to revert his update to the app then the following scenarios will apply \n<br>1. If the users updated app version is version 1.2.0 (which is the latest) then he cannot downgrade to a below version since version 1.2.0 has been marked as a stable release \n<br>2. If the users updated app version is greater than version 1.1.6 and less then version 1.2.0, and the user chooses to downgrade then version 1.1.5 of the app will be installed on this mobile \n<br>3. If the users updated app version is 1.1.5 then he will not have an option to downgrade since no mapping is specified against it and will be considered as a stable release \n<br>4. Conflicting ranges must be screened during the stable release specification entry"},{"user":"https://wpdev.uservoice.com/users/94518531-sree-prasantha-ram-mulpuri","datetime":"2015-08-12","body":"The developer must have the option to keep an inventory of stable app release against updated app versions \n<br>Configuration Example:\n<br>Update Version :: Stable Version\n<br>==1.2.0 :: 1.2.0 \n<br>&gt;=1.1.6 :: 1.1.5 \n<br>&lt;=1.1.4 :: 1.1.0 \n<br>&lt;=1.0.9 :: 1.0.5 \n<br>When the user decides to revert his update to the app then the following scenarios will apply \n<br>1. If the users updated app version is version 1.2.0 (which is the latest) then he cannot downgrade to a below version since version 1.2.0 has been marked as a stable release \n<br>2. If the users updated app version is greater than version 1.1.6 and less then version 1.2.0, and the user chooses to downgrade then version 1.1.5 of the app will be installed on this mobile \n<br>3. If the users updated app version is 1.1.5 then he will not have an option to downgrade since no mapping is specified against it and will be considered as a stable release \n<br>4. Conflicting ranges must be screened during the stable release specification entry"},{"user":"https://wpdev.uservoice.com/users/36970848-simon-jackson","datetime":"2014-06-26","body":"Even with the rapid deployments (which are great) we would still need the rollback feature.\n<br>Consider the scenario:\n<br>1: new release published\n<br>2: Users complain of a critical issue introduced which causes the app to crash\n<br>3: It may take several days to resolve the issue and resubmit an updated release"},{"user":"https://wpdev.uservoice.com/users/46108724-latenight-apps","datetime":"2014-01-23","body":"Cliff,"},{"user":"https://wpdev.uservoice.com/users/39531197","datetime":"2013-12-19","body":"1 - I think being able to go back one release is enough. This should only be used in emergencies. That said I think we should make sure this scenario is possible. v1.0 is released and is healthy, v1.1 is released w/ critical bug so developer rolls back to v1.0. Developer updates to v1.2 but finds that this update has a second critical bug. Developer should be able to roll back to v1.0 again since v1.0 was the last build in the store, v1.1 should not be the 'back-up release' since it was replaced with v1.0.\n<br>2 - I think we would want users to go back to the last healthy version. But even if only stopping more 'bad' upgrades is possible I still think this feature would be helpful."},{"user":"https://wpdev.uservoice.com/users/14913141-hermit-dave","datetime":"2013-12-19","body":"@Cliff,"},{"user":"https://wpdev.uservoice.com/users/726447649--deleted-user","datetime":"2013-12-17","body":"A couple questions for those on this suggestion to add clarity."},{"user":"https://wpdev.uservoice.com/users/39728798-mark-allan","datetime":"2013-12-16","body":"Genius!"},{"user":"https://wpdev.uservoice.com/users/39531197","datetime":"2013-12-16","body":"*Occassionally an update with a critical bug gets past developer &amp; certification testing..."},{"user":"https://wpdev.uservoice.com/users/44376055","datetime":"2013-12-12","body":"Duplicate?"}]}